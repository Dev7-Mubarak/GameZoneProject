// <auto-generated />
using System;
using GameZone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameZone.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250326020229_Seed-Data")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DeviceGame", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("int");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.HasKey("DevicesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("DeviceGame");
                });

            modelBuilder.Entity("DeviceRoom", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("DevicesId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("DeviceRoom");
                });

            modelBuilder.Entity("GameZone.Models.AccountsInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameStationId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameStationId");

                    b.ToTable("AccountsInformation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = "1234567890",
                            GameStationId = 1,
                            ProviderName = "Omgy"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = "2345678901",
                            GameStationId = 1,
                            ProviderName = "Karamy"
                        });
                });

            modelBuilder.Entity("GameZone.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FisrtName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d013cfeb-f332-4a2a-be26-e1424cb1db6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b77a5a8e-7bc5-4d0b-bdb0-d424ffcecc19",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FisrtName = "Mubarak",
                            LastName = "Bamazhem",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMmDt6fP95WNX7aM8bbTo2sZVDVqA6rekUV0eD9WAW6ssU47L9x628a3xHWLWHrm6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b66d9bd2-6032-4f46-a3ca-6241f6cefa16",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "abf91534-d7a0-442a-a5b2-27d03e6d20e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c34ffa63-a4c4-438f-8708-2ecc89d32371",
                            Email = "owner@example.com",
                            EmailConfirmed = true,
                            FisrtName = "Mubarak",
                            LastName = "Bamazhem",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@EXAMPLE.COM",
                            NormalizedUserName = "OWNER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL3cRNCzfWriy0yZe49xPJeYzK6zS9h59pC2AcYpc1zajK/UUM1/rHcKr2W5HYqMbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23c4d50b-f5b6-40ac-93c6-c4bbb44837e8",
                            TwoFactorEnabled = false,
                            UserName = "owner@example.com"
                        },
                        new
                        {
                            Id = "523fc805-6d16-44e5-8ef8-ad49a82ebca5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c43edcc-6113-4c8b-8e81-b940e0c0be92",
                            Email = "User@example.com",
                            EmailConfirmed = true,
                            FisrtName = "Mubarak",
                            LastName = "Bamazhem",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZUKpYuOTc0xsA8ts2I+tCtbly3IrQ1zFBk8csKbRdjUpezC+EOwhyREPmLzJroaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e5693d-b05b-405a-b6f5-65298399a67b",
                            TwoFactorEnabled = false,
                            UserName = "User@example.com"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Racing"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descraption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Developer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Release")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameZone.Models.GameStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descraption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EveningCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EveningOpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("MorningCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MorningOpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descraption = "Retro and modern games",
                            EveningCloseTime = new TimeSpan(0, 1, 0, 0, 0),
                            EveningOpenTime = new TimeSpan(0, 19, 0, 0, 0),
                            Image = "pixelworld.jpg",
                            Location = "Tech Park",
                            MorningCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            MorningOpenTime = new TimeSpan(0, 11, 0, 0, 0),
                            Name = "Pixel World",
                            PhoneNumber1 = "4567890123",
                            PhoneNumber2 = "3210987654",
                            Rating = 4.6f,
                            UserId = "8b178fa1-99b6-4d93-abdb-3c834c1c853a"
                        });
                });

            modelBuilder.Entity("GameZone.Models.GameStationGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStationId");

                    b.ToTable("GameStationGames");
                });

            modelBuilder.Entity("GameZone.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Transfer"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameStationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UserRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GameStationId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("GameZone.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameStationId")
                        .HasColumnType("int");

                    b.Property<short>("NumberOfHours")
                        .HasColumnType("smallint");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Satuts")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameStationId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 3, 26, 5, 2, 27, 937, DateTimeKind.Local).AddTicks(7265),
                            DepositImage = "deposit_image_1.jpg",
                            EndHour = new DateTime(2025, 3, 26, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            GameStationId = 1,
                            NumberOfHours = (short)4,
                            PaymentMethodId = 2,
                            RoomId = 1,
                            Satuts = 2,
                            StartHour = new DateTime(2025, 3, 26, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 100f,
                            UserId = "4a1e51b4-d214-471b-b8d8-2ded79626452"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 3, 26, 5, 2, 27, 937, DateTimeKind.Local).AddTicks(7289),
                            DepositImage = "deposit_image_2.jpg",
                            EndHour = new DateTime(2025, 3, 27, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GameStationId = 1,
                            NumberOfHours = (short)6,
                            PaymentMethodId = 2,
                            RoomId = 2,
                            Satuts = 1,
                            StartHour = new DateTime(2025, 3, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 150f,
                            UserId = "4a1e51b4-d214-471b-b8d8-2ded79626452"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 3, 26, 5, 2, 27, 937, DateTimeKind.Local).AddTicks(7294),
                            DepositImage = "deposit_image_3.jpg",
                            EndHour = new DateTime(2025, 3, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            GameStationId = 1,
                            NumberOfHours = (short)8,
                            PaymentMethodId = 2,
                            RoomId = 3,
                            Satuts = 3,
                            StartHour = new DateTime(2025, 3, 28, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 200f,
                            UserId = "4a1e51b4-d214-471b-b8d8-2ded79626452"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 3, 26, 5, 2, 27, 937, DateTimeKind.Local).AddTicks(7301),
                            EndHour = new DateTime(2025, 3, 29, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            GameStationId = 1,
                            NumberOfHours = (short)4,
                            PaymentMethodId = 1,
                            RoomId = 4,
                            Satuts = 4,
                            StartHour = new DateTime(2025, 3, 29, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 120f,
                            UserId = "4a1e51b4-d214-471b-b8d8-2ded79626452"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 3, 26, 5, 2, 27, 937, DateTimeKind.Local).AddTicks(7305),
                            EndHour = new DateTime(2025, 3, 29, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            GameStationId = 1,
                            NumberOfHours = (short)4,
                            PaymentMethodId = 1,
                            RoomId = 1,
                            Satuts = 4,
                            StartHour = new DateTime(2025, 3, 29, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 120f,
                            UserId = "4a1e51b4-d214-471b-b8d8-2ded79626452"
                        });
                });

            modelBuilder.Entity("GameZone.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameStationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("NumberOfAllowedPeople")
                        .HasColumnType("smallint");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PrimaryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Unit")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("GameStationId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameStationId = 1,
                            Name = "Room A",
                            NumberOfAllowedPeople = (short)2,
                            Price = 100f,
                            PrimaryImage = "roomA.jpg",
                            Unit = (byte)4
                        },
                        new
                        {
                            Id = 2,
                            GameStationId = 1,
                            Name = "Room B",
                            NumberOfAllowedPeople = (short)3,
                            Price = 150f,
                            PrimaryImage = "roomB.jpg",
                            Unit = (byte)3
                        },
                        new
                        {
                            Id = 3,
                            GameStationId = 1,
                            Name = "Room C",
                            NumberOfAllowedPeople = (short)4,
                            Price = 120f,
                            PrimaryImage = "roomC.jpg",
                            Unit = (byte)5
                        },
                        new
                        {
                            Id = 4,
                            GameStationId = 1,
                            Name = "Room D",
                            NumberOfAllowedPeople = (short)5,
                            Price = 180f,
                            PrimaryImage = "roomD.jpg",
                            Unit = (byte)4
                        });
                });

            modelBuilder.Entity("GameZone.Models.RoomsPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomsPictures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c23f183a-dd06-4d71-b640-ef87a5266b52",
                            ConcurrencyStamp = "ef098876-5a97-4bcc-8f4c-3dd4a43f462c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "31630169-fdd5-4cd8-a588-4a5aa79255e4",
                            ConcurrencyStamp = "96a430f7-6bbc-4c99-912f-34b3bda1a291",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "ff3dcce5-21c9-4912-8fe1-2a0608cd4942",
                            ConcurrencyStamp = "bdfd0e02-0417-4ee8-a028-44a61bb1b998",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d013cfeb-f332-4a2a-be26-e1424cb1db6e",
                            RoleId = "c23f183a-dd06-4d71-b640-ef87a5266b52"
                        },
                        new
                        {
                            UserId = "abf91534-d7a0-442a-a5b2-27d03e6d20e8",
                            RoleId = "31630169-fdd5-4cd8-a588-4a5aa79255e4"
                        },
                        new
                        {
                            UserId = "523fc805-6d16-44e5-8ef8-ad49a82ebca5",
                            RoleId = "ff3dcce5-21c9-4912-8fe1-2a0608cd4942"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DeviceGame", b =>
                {
                    b.HasOne("GameZone.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceRoom", b =>
                {
                    b.HasOne("GameZone.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameZone.Models.AccountsInformation", b =>
                {
                    b.HasOne("GameZone.Models.GameStation", "GameStation")
                        .WithMany("AccountsInformations")
                        .HasForeignKey("GameStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameStation");
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.HasOne("GameZone.Models.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GameZone.Models.GameStation", b =>
                {
                    b.HasOne("GameZone.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameZone.Models.GameStationGame", b =>
                {
                    b.HasOne("GameZone.Models.Game", "Game")
                        .WithMany("GameStationGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.GameStation", "GameStation")
                        .WithMany("GameStationGames")
                        .HasForeignKey("GameStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameStation");
                });

            modelBuilder.Entity("GameZone.Models.Rating", b =>
                {
                    b.HasOne("GameZone.Models.GameStation", "GameStation")
                        .WithMany("Ratings")
                        .HasForeignKey("GameStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameZone.Models.Reservation", b =>
                {
                    b.HasOne("GameZone.Models.GameStation", "GameStation")
                        .WithMany("Reservations")
                        .HasForeignKey("GameStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Reservations")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.AppUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameStation");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameZone.Models.Room", b =>
                {
                    b.HasOne("GameZone.Models.GameStation", "GameStation")
                        .WithMany("Rooms")
                        .HasForeignKey("GameStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameStation");
                });

            modelBuilder.Entity("GameZone.Models.RoomsPicture", b =>
                {
                    b.HasOne("GameZone.Models.Room", "Room")
                        .WithMany("RoomsPictures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameZone.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameZone.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameZone.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameZone.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameZone.Models.AppUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GameZone.Models.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameZone.Models.Game", b =>
                {
                    b.Navigation("GameStationGames");
                });

            modelBuilder.Entity("GameZone.Models.GameStation", b =>
                {
                    b.Navigation("AccountsInformations");

                    b.Navigation("GameStationGames");

                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("GameZone.Models.PaymentMethod", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GameZone.Models.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomsPictures");
                });
#pragma warning restore 612, 618
        }
    }
}
