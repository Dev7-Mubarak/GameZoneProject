@using GameZone.Helpers
@model IEnumerable<GameZone.Models.Reservation>
@{
    ViewData["Title"] = "User Reservation Log";
}
}
}

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<div class="container-fluid">
    <h1 class="text-center text-success mb-5">Reservation Log</h1>
    <div class="pt-5">
        @if (!Model.Any())
        {
            <div class="alert alert-info text-center py-4">
                <i class="bi bi-info-circle-fill me-2"></i>You don't have any reservations yet.
            </div>
        }
        else
        {
            <table id="reservationTable" class="table table-striped text-center text-white">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type Of Rooms</th>
                        <th>Date Of Reservation</th>
                        <th>Time Of Reservation</th>
                        <th>Number Of Hours</th>
                        <th>Total Cost</th>
                        <th>Payment Method</th>
                        <th>Status Of Reservation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var reservation in Model)
                    {
                        <tr>
                            <td>@reservation.Id</td>
                            <td>@reservation.RoomName</td>
                            <td>@reservation.Date.ToString("yyyy-MM-dd")</td>
                            <td>@reservation.StartHour.ToString("hh:mm tt")</td>
                            <td>@reservation.NumberOfHours Hours</td>
                            <td>@reservation.TotalPrice RY</td>
                            <td>
                                @if (reservation.PaymentMethod == "Transfer")
                                {
                                    <img src="@($"{FileSettings.DepositsFilePath}/{reservation.Image}")" alt="Name" class="rounded-circle"
                                         style="max-width: 60px; max-height: 80px" />
                                }
                                else
                                {
                                    @reservation.PaymentMethod
                                }
                            </td>
                            <td class="text-center">
                                <span class="badge @GetStatusBadgeClass(reservation.Satuts) rounded-pill py-2 px-3">
                                    @reservation.Satuts
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            var dataTable = $('#reservationTable').DataTable({
                "paging": true,
                "pageLength": 10,
                "ordering": true,
                "searching": true,
                "columnDefs": [
                    { "type": "date", "targets": 2 },
                    { "type": "date", "targets": 3 },
                    { "orderable": false, "targets": [8] }
                ],
                "initComplete": function(settings, json) {
                    this.api().column(7).search('^Pending$', true, false).draw();
                }
            });

            // Status filter
            $("#reservationTable_filter").prepend(
                '<label class="mr-2">Status Filter: ' +
                '<select id="statusFilter" class="form-control form-control-sm d-inline-block w-auto ml-1">' +
                '<option value="Pending" selected>Pending</option>' +
                '<option value="Completed">Completed</option>' +
                '<option value="Denied">Denied</option>' +
                '</select></label>'
            );

            $('#statusFilter').on('change', function () {
                dataTable.column(7)
                    .search(this.value ? '^' + this.value + '$' : '', true, false)
                    .draw();
            });

            // Accept button handler
            $('#reservationTable').on('click', '.btnAccept', function () {
                const $row = $(this).closest('tr');
                const reservationId = $(this).data('id');
                const row = dataTable.row($row);

                Swal.fire({
                    title: 'Confirm Acceptance',
                    text: 'Are you sure you want to accept this reservation?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Confirm'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Owner/Reservations/UpdateReservationStatus',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                Id: reservationId,
                                Status: 3 // Integer value for Completed
                            }),
                            success: () => {
                                const rowData = row.data();
                                rowData[7] = 'Completed'; // Display text
                                rowData[8] = ''; // Clear actions
                                row.data(rowData).draw();
                                Swal.fire('Success!', 'Reservation completed!', 'success');
                            },
                            error: (xhr) => {
                                const errorMsg = xhr.responseJSON?.value || 'Update failed';
                                Swal.fire('Error!', errorMsg, 'error');
                            }
                        });
                    }
                });
            });

            // Reject button handler
            $('#reservationTable').on('click', '.btnReject', function () {
                const $row = $(this).closest('tr');
                const reservationId = $(this).data('id');
                const row = dataTable.row($row);

                Swal.fire({
                    title: 'Confirm Rejection',
                    text: 'Are you sure you want to reject this reservation?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Confirm'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Owner/Reservations/UpdateReservationStatus',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                Id: reservationId,
                                Status: 2 // Integer value for Denied
                            }),
                            success: () => {
                                const rowData = row.data();
                                rowData[7] = 'Denied'; // Display text
                                rowData[8] = '';
                                row.data(rowData).draw();
                                Swal.fire('Success!', 'Reservation denied!', 'success');
                            },
                            error: (xhr) => {
                                const errorMsg = xhr.responseJSON?.value || 'Update failed';
                                Swal.fire('Error!', errorMsg, 'error');
                            }
                        });
                    }
                });
            });
        });
    </script>
}

@functions {
    string GetStatusBadgeClass(ReservationStatus status)
    {
        return status switch
        {
            ReservationStatus.Confirmed => "bg-success",
            ReservationStatus.Pending => "bg-warning text-dark",
            ReservationStatus.Denied => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
       
      

